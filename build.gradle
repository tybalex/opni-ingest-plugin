import org.opensearch.gradle.test.RestIntegTestTask

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.yaml-rest-test'
apply plugin: 'com.google.protobuf'

def pluginName = 'opnipreprocessing'
def pluginDescription = 'A custom plugin to preprocess log data for Opni.'
def projectPath = 'org.opensearch'
def pathToPlugin = 'opnipreprocessing.plugin'
def pluginClassName = 'OpniPreprocessingPlugin'

opensearchplugin {
    name pluginName
    description pluginDescription
    classname "${projectPath}.${pathToPlugin}.${pluginClassName}"
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false

// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false

// disable it for ignore licenseheader check of generated code from proto
licenseHeaders.enabled = false
// disable it to skip the check, bc it's unhappy with this in protobuf: `Forbidden class/interface use: sun.misc.Unsafe [non-public internal runtime class]`
thirdPartyAudit.enabled = false

buildscript {
    ext {
        opensearch_version = "1.3.3-SNAPSHOT"
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        // gradlePluginPortal()
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    // required for the yaml test to run
    yamlRestTestImplementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'io.nats:jnats:2.14.1-SNAPSHOT' //jnats
    implementation 'net.i2p.crypto:eddsa:0.3.0' //nkey
    // implementation 'com.google.code.gson:gson:2.9.0' //gson
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation 'com.google.protobuf:protobuf-java:3.21.1'

}

sourceSets {
    main {
        proto {
            srcDirs 'src/main/java/org/opensearch/opnipreprocessing/proto'
        }
        // java {
        //     srcDirs 'src/main/java/org/opensearch/opnipreprocessing/plugin'
        // }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.7.0"
    }
    generateProtoTasks.generatedFilesBaseDir = 'src/'

    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each { task ->
            // Here you can configure the task
        }

        // In addition to all(), you may get the task collection by various
        // criteria:

        // (Java only) returns tasks for a sourceSet
        ofSourceSet('main')

    }
}


test {
    include '**/*Tests.class'
}

task integTest(type: RestIntegTestTask) {
    description = "Run tests against a cluster"
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}
tasks.named("check").configure { dependsOn(integTest) }

integTest {
    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

testClusters.integTest {
    testDistribution = "INTEG_TEST"

    // This installs our plugin into the testClusters
    plugin(project.tasks.bundlePlugin.archiveFile)
}

run {
    useCluster testClusters.integTest
}
